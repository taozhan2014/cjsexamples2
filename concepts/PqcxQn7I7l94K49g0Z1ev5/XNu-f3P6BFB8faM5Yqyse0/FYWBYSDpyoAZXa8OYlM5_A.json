{
  "uri" : "local://FYWBYSDpyoAZXa8OYlM5_A/",
  "name" : "mammal-explorer",
  "category" : "js",
  "parent" : "local://XNu-f3P6BFB8faM5Yqyse0/",
  "pname" : "Mammal Class Explorer",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_javascriptResource_js",
    "expr" : {
      "str" : "var urisToIgnore = [\"http://dbpedia.org/resource/Incertae_sedis\", \"http://dbpedia.org/resource/Extinction\", \"http://dbpedia.org/resource/Dagger_(typography)\"]\nvar emptyImg = \"//upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png\";\nvar typeList = [\"Class\", \"Order\", \"Family\", \"Genus\", \"Species\", \"Subspecies\"];\nvar typeMap = {\n    \"Class\": {\n        \"rel\": \"http://dbpedia.org/ontology/class\"\n    },\n    \"Order\": {\n        \"parentRel\": \"http://dbpedia.org/ontology/class\",\n        \"rel\": \"http://dbpedia.org/ontology/order\"\n    },\n    \"Family\": {\n        \"parentRel\": \"http://dbpedia.org/ontology/order\",\n        \"rel\": \"http://dbpedia.org/ontology/family\"\n    },\n    \"Genus\": {\n        \"parentRel\": \"http://dbpedia.org/ontology/family\",\n        \"rel\" : \"http://dbpedia.org/ontology/genus\"\n    }, \n    \"Species\": {\n        \"parentRel\": \"http://dbpedia.org/ontology/genus\",\n        \"identifier\": \"http://dbpedia.org/property/binomial\",\n        \"ignoreId\": false\n    }, \n    \"Subspecies\": {\n        \"parentRel\": \"http://dbpedia.org/ontology/species\",\n        \"identifier\": \"http://dbpedia.org/property/trinomial\",\n        \"ignoreId\": false\n    }\n};\n\nvar dbpedia = \"http://fragments.dbpedia.org/2014/en\";\nvar warned = false;\n\nvar nameQuery = function(uri) {\n    return 'SELECT ?name WHERE { <' + uri + '> <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). } LIMIT 1';\n}\nvar nameDescTnQuery = function(uri, idField) {\n    return 'SELECT * WHERE { <' + uri + '> <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). '\n     + (idField ? (' OPTIONAL {<' + uri + '> <' + idField + '> ?identifier }. ') : '')\n     + ' OPTIONAL {<' + uri + '> <http://dbpedia.org/ontology/thumbnail> ?thumbnail }. '\n     + ' OPTIONAL {<' + uri + '> <http://xmlns.com/foaf/0.1/isPrimaryTopicOf> ?wpPage }'\n     + ' OPTIONAL {<' + uri + '> <http://www.w3.org/2000/01/rdf-schema#comment> ?desc FILTER langMatches(lang(?desc),\"en\")}. } LIMIT 1';\n}\nvar nameTnQuery = function(uri) {\n    return 'SELECT ?name ?thumbnail WHERE { <' + uri + '> <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). '\n     + ' OPTIONAL {<' + uri + '> <http://dbpedia.org/ontology/thumbnail> ?thumbnail }. } LIMIT 1';\n}\n\nvar parentQuery = function(type, uri) {\n    if ((type == \"Species\") || (type == \"Subspecies\")) {\n        return 'SELECT ?parent WHERE { '\n             + ' <' + uri + '> <' + typeMap[type].parentRel + '> ?parent. '\n             + ' } LIMIT 1 ';\n    } else if ((type == \"Genus\") || (type == \"Family\")) {\n        // Inefficient query because there is no parent-child relationship above Genus\n        return 'SELECT ?parent WHERE { '\n             + ' ?species <' + typeMap[type].rel + '> <' + uri + '>. '\n             + ' ?species <http://dbpedia.org/property/binomial> ?binomial. '\n             + ' ?species <' + typeMap[type].parentRel + '> ?parent. '\n             + ' } LIMIT 1 '\n    } else if (type == \"Order\") {\n        return 'http://dbpedia.org/resource/Mammal';\n    } else {\n        return '';\n    }\n}\nvar childrenQuery = function(type, uri) {\n    if ((type == \"Species\") || (type == \"Subspecies\")) {\n        return 'SELECT DISTINCT ?child ?name ?thumbnail ?identifier WHERE { '\n             + ' ?child <' + typeMap[type].parentRel + '> <' + uri + '>. '\n             + ' ?child <' + typeMap[type].identifier + '> ?identifier. '\n             + ' ?child <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). '\n             + ' OPTIONAL {?child <http://dbpedia.org/ontology/thumbnail> ?thumbnail }. '\n             + ' } LIMIT 200 ';\n    } else if ((type == \"Genus\") || (type == \"Family\")) {\n        // Inefficient query because there is no parent-child relationship above Genus\n        return 'SELECT DISTINCT ?child ?name ?thumbnail WHERE { '\n             + ' ?species <' + typeMap[type].parentRel + '> <' + uri + '>. '\n             + ' ?species <http://dbpedia.org/property/binomial> ?binomial. '\n             + ' ?species <' + typeMap[type].rel + '> ?child. '\n             + ' ?child <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). '\n             + ' OPTIONAL {?child <http://dbpedia.org/ontology/thumbnail> ?thumbnail }. '\n             + ' } LIMIT 200 ';\n    } else if (type == \"Order\") {\n        // Inefficient query because there is no parent-child relationship above Genus\n        return 'SELECT DISTINCT ?child ?name ?thumbnail WHERE { '\n             + ' ?species <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Mammal>. '\n             + ' ?species <http://dbpedia.org/property/binomial> ?binomial. '\n             + ' ?species <' + typeMap[type].rel + '> ?child. '\n             + ' ?child <http://www.w3.org/2000/01/rdf-schema#label> ?name FILTER langMatches(lang(?name),\"en\"). '\n             + ' OPTIONAL {?child <http://dbpedia.org/ontology/thumbnail> ?thumbnail }. '\n             + ' } LIMIT 200 ';\n    } else {\n        console.log('Children at ' + type + ' is not supported')\n        return '';\n    }\n};\n\nvar removeEn = function(str) { return str.substring(1, str.length - 4);}; \nvar runQuery = function(query, callback) {\n    console.log(\"Running SPARQL query: \" + query);\n    var endpoint = 'https://web.conceptjs.com/sparql/dbpedia'\n    var url = endpoint + '?format=json&query=' + encodeURIComponent(query);\n    console.log(\"Accessing URL: \" + url)\n    $.ajax({ url: url, dataType: 'json' }).done(function(data) {\n          _.each(data.results.bindings, function(row) { callback(row); });\n          //console.log(\"Done\");\n      }).fail(function(err) {\n          if (!warned) {\n              alert(\"Query failed. See console for errors. \");\n              warned = true;\n          }\n          console.log(\"Error: \" + JSON.stringify(err));\n      })\n}\n\nfunction loadParentDetails(uri, obs) {\n    var query = nameQuery(uri);\n    runQuery(query, function(data) {\n        obs.uri(uri);\n        //obs.name(removeEn(data[\"?name\"]));\n        obs.name(data.name.value);\n    });\n}\n\nfunction loadParent(type, uri, obs) {\n    var queryOrUri = parentQuery(type, uri);\n    if (!queryOrUri) {\n        return;\n    } else if (queryOrUri.indexOf(\"http\") == 0) {\n        loadParentDetails(queryOrUri, obs);\n    } else {\n        runQuery(queryOrUri, function(data) {\n            obs.name(\"Loading...\");\n            //loadParentDetails(data[\"?parent\"], obs);\n            loadParentDetails(data.parent.value, obs);\n        });\n    }\n}\n\nfunction loadCurrent(type, uri, obs) {\n    var query = nameDescTnQuery(uri, typeMap[type][\"identifier\"]);\n    runQuery(query, function(data) {\n        var identifier = data[\"identifier\"] ? data.identifier.value : \"\";\n        obs.desc(data.desc.value);\n        obs.name(data.name.value);\n        obs.identifier(identifier);\n        console.log(\"Found current identifier: \" + identifier);\n        obs.imgSrc(data[\"thumbnail\"] ? data.thumbnail.value.replace(\"http://\", \"https://\") : emptyImg);\n        obs.wpPage(data[\"wpPage\"] ? data.wpPage.value : \"\");\n    });\n}\n\nfunction loadChildren(cType, puri, obs, viewModel) {\n    var query = childrenQuery(cType, puri);\n    if (!query) return;\n    runQuery(query, function(data) {\n        if (viewModel.current.uri() != puri) {\n            console.log(\"Skipping because response is late\");\n            return;\n        }\n\n        //var identifier = data[\"?identifier\"];\n        //var uri = data[\"?child\"];\n        var uri = data.child.value;\n        if (!_.contains(urisToIgnore, uri)) {\n            var identifier = data[\"identifier\"] ? data.identifier.value : \"\";\n            obs.push({uri: uri, \n                name: data.name.value,\n                identifier: identifier,\n                imgSrc: data[\"thumbnail\"] ? data.thumbnail.value.replace(\"http://\", \"https://\") : emptyImg,\n                click: function() {\n                    viewModel.childClick(uri);\n                }\n            });\n        }\n    });\n}\n\nfunction AKViewModel(anchorUri) {\n    var self = this;\n    this.idx = ko.observable(0);\n    this.parentVisible = ko.computed(function() { return this.idx() > 0; }, this);\n    this.childrenVisible = ko.computed(function() { return this.idx() < typeList.length - 1; }, this);\n    this.parentType = ko.computed(function() { return this.parentVisible() ? typeList[this.idx() - 1] : \"\"; }, this);\n    this.currentType = ko.computed(function() { return typeList[this.idx()]; }, this);\n    this.childType = ko.computed(function() { return this.childrenVisible() ? typeList[this.idx() + 1] : \"\"; }, this);\n\n    this.parent = {\n        uri: ko.observable(\"\"),\n        name: ko.observable(\"\")\n    };\n\n    this.current = {\n        uri: ko.observable(\"\"),\n        identifier: ko.observable(\"\"),\n        name: ko.observable(\"\"),\n        imgSrc: ko.observable(emptyImg),\n        desc: ko.observable(\"\"),\n        wpPage: ko.observable(\"\")\n    };\n\n    this.link = ko.observable(\"\");\n    this.children = ko.observableArray([]);\n    this.numChildren = ko.computed(function() {return this.children().length}, this);\n\n    this.refresh = function(idx, uri) {\n        this.idx(idx);\n\n        _.each(viewModel.current, function(x) { x(\"\") });\n        _.each(viewModel.parent, function(x) { x(\"\") });\n        viewModel.children.removeAll();\n\n        viewModel.current.uri(uri); \n        this.link(\"/view\" + anchorUri + \"?level=\" + idx + \"&uri=\" + encodeURIComponent(uri));\n\n        console.log(\"Loading \" + uri + \" with level \" + typeList[idx]);\n        loadCurrent(typeList[idx], uri, self.current);\n        if (self.parentVisible()) loadParent(typeList[idx], uri, self.parent);\n        if (self.childrenVisible()) loadChildren(typeList[idx + 1], uri, self.children, self);\n    }\n\n    this.parentClick = function() {\n        if (self.parentVisible()) {\n            var puri = self.parent.uri();\n            if (puri) {\n                self.refresh(this.idx() - 1, puri);\n            }\n        }\n    };\n\n    this.childClick = function(curi) {\n        if (self.childrenVisible()) {\n            self.refresh(this.idx() + 1, curi);\n        }\n    }\n}"
    }
  }, {
    "name" : "_javascriptResource_fileName",
    "expr" : {
      "str" : "mammal-explorer"
    }
  }, {
    "name" : "javascriptResource",
    "expr" : {
      "concept" : "/common/core/nK_9eZMUDp8T6qqr7t5k67/",
      "conceptName" : "Javascript Resource",
      "bindings" : {
        "js" : "_javascriptResource_js",
        "fileName" : "_javascriptResource_fileName"
      }
    }
  } ],
  "isas" : [ {
    "var" : "javascriptResource"
  } ],
  "isLambda" : false,
  "digest" : "ImZMjP8yu+yxLh3kHdOpKQ=="
}